[gd_scene load_steps=3 format=3 uid="uid://co31fp6vvdxl6"]

[sub_resource type="Shader" id="Shader_fy2ko"]
code = "shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

void fragment() {
    vec4 tex_color = texture(SCREEN_TEXTURE, SCREEN_UV); // Get screen pixels

    float gray = dot(tex_color.rgb, vec3(0.299, 0.587, 0.114)); // Convert to grayscale

    // Game Boy-like palette shades
    vec3 dark_green = vec3(0.059, 0.220, 0.059);  // Dark green
    vec3 medium_green = vec3(0.188, 0.384, 0.188); // Medium green
    vec3 light_green = vec3(0.545, 0.674, 0.059);  // Light green
    vec3 lightest_green = vec3(0.654, 0.816, 0.557); // Lightest green

    // Map grayscale value to one of the Game Boy colors
    vec3 gameboy_color = mix(dark_green, medium_green, smoothstep(0.0, 0.33, gray));
    gameboy_color = mix(gameboy_color, light_green, smoothstep(0.33, 0.66, gray));
    gameboy_color = mix(gameboy_color, lightest_green, smoothstep(0.66, 1.0, gray));

    // Increase brightness by blending with the original color
    float brightness_factor = 0.3; // Adjust this value to control brightness
    vec3 brightened_gray = mix(vec3(gray), tex_color.rgb, brightness_factor);

    if (gray == 0.0) {
        COLOR = vec4(0.0, 0.0, 0.0, tex_color.a); // Keep black unchanged
    } else if (gray == 1.0) {
        COLOR = vec4(1.0, 1.0, 1.0, tex_color.a); // Keep white unchanged
    } else {
        COLOR = vec4(brightened_gray * gameboy_color, tex_color.a); // Apply Game Boy color
    }
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_j3bmm"]
shader = SubResource("Shader_fy2ko")

[node name="CanvasLayer" type="CanvasLayer"]

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_j3bmm")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
